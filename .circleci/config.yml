version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.1.0
jobs:
  build:
    docker:
      - image: cimg/base:stable
    environment:
      MYSQL_VERSION: 5.7
      SCHEMASPY_VERSION: 6.1.0
      DBMATE_VERSION: 1.14.0
      TBLS_VERSION: v1.55.1
      PERCONA_TOOLKIT_VERSION: 3.2.1
      DB_NAME: sakila
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
      - aws-cli/setup
      - run:
          name: setup Docker network
          command:
            docker network create circleci || true
      - run:
          name: setup SQL directory
          command: |
            docker create -v /docker-entrypoint-initdb.d --name sql busybox:musl /bin/true
            docker cp ~/project/db/baseline.sql sql:/docker-entrypoint-initdb.d
      - run:
          name: Init MySQL db
          background: true
          command: |
            docker run --network circleci --volumes-from sql --name mysql -e MYSQL_ROOT_HOST='%' -e MYSQL_ALLOW_EMPTY_PASSWORD=true -e MYSQL_DATABASE=${DB_NAME} mysql:${MYSQL_VERSION}
      - run:
          name: Docker Pull
          command: |
            # MySQLの起動時間中に必要なDockerイメージを事前にpullすることで、各ステージでのpull時間を節約しています。
            docker pull jwilder/dockerize
            docker pull amacneil/dbmate:${DBMATE_VERSION}
            docker pull k1low/tbls:${TBLS_VERSION}
            docker pull perconalab/percona-toolkit:${PERCONA_TOOLKIT_VERSION}
            docker pull schemaspy/schemaspy:${SCHEMASPY_VERSION}
      - run:
          name: Create data volume
          command: |
            # remote Docker環境のコンテナはローカルファイルを直接マウントできないため、コピー用のコンテナにコピーして、そのコンテナをマウントする形式です
            # このことはCircleCIドキュメントにも記載があります
            # https://circleci.com/docs/ja/2.0/building-docker-images/#mounting-folders
            docker create -v /config --name config busybox:musl /bin/true
            docker cp schemaspy.properties config:/config
            docker create -v /db --name migrate busybox:musl /bin/true
            docker cp ~/project/db/ migrate:/
            docker create -v /tbls --name tblsyml busybox:musl /bin/true
            docker cp ~/project/.tbls.yml tblsyml:/tbls
      - run:
          name: Wait for starting MySQL
          command: |
            docker run --network circleci jwilder/dockerize -wait tcp://mysql:3306 -timeout 3m -wait-retry-interval 1s
      - run:
          name: dbmate migration
          command: |
            docker run --network circleci --volumes-from migrate --name dbmate amacneil/dbmate:${DBMATE_VERSION} -u "mysql://root@mysql:3306/${DB_NAME}" up
      - run:
          name: tbls lint
          command: |
            docker run --network circleci --volumes-from tblsyml --name tbls k1low/tbls:${TBLS_VERSION} lint --config /tbls/.tbls.yml mysql://root@mysql:3306/${DB_NAME}
      - run:
          name: check duplicated index
          command: |
            docker run --network circleci --name perconatoolkit perconalab/percona-toolkit:${PERCONA_TOOLKIT_VERSION} pt-duplicate-key-checker --host mysql --user root --databases ${DB_NAME}
      - run:
          name: Run SchemaSpy
          working_directory: .
          command: |
            docker run --network circleci --volumes-from config --name schemaspy schemaspy/schemaspy:${SCHEMASPY_VERSION} -configFile /config/schemaspy.properties -imageformat svg
      - run:
          name: Download Schema Graph
          command: |
            docker cp schemaspy:/output ./
      - run:
          name: aws login
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              aws_sts_credentials=$(aws sts assume-role-with-web-identity --role-arn ${AWS_ROLE_ARN} --web-identity-token ${CIRCLE_OIDC_TOKEN} --role-session-name "circle-ci-session" --duration-seconds 900 --query "Credentials" --output "json")
              echo export AWS_ACCESS_KEY_ID="$(echo $aws_sts_credentials | jq -r '.AccessKeyId')" >> $BASH_ENV
              echo export AWS_SECRET_ACCESS_KEY="$(echo $aws_sts_credentials | jq -r '.SecretAccessKey')" >> $BASH_ENV
              echo export AWS_SESSION_TOKEN="$(echo $aws_sts_credentials | jq -r '.SessionToken')" >> $BASH_ENV
              source $BASH_ENV
            fi
      - run:
          name: Upload S3 bucket and invalidate CF
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              aws s3 sync --delete --only-show-errors output/ s3://${S3_BUCKET_NAME}/
              aws cloudfront create-invalidation --distribution-id ${CF_DISTRIBUTION_ID} --paths "/*"
            fi
      - store_artifacts:
          path: ./output

workflows:
  version: 2
  build:
    jobs:
    - build:
        context:
          context